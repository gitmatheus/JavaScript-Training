Matheus GonÃ§alves
I'm a Lead Engineer on team Trailhead

Primary Skill set is back end development, Java, C, TypeScript, Ruby, Apex 

Experience with Angular, JQuery, Next 

I'm very interested in understanding vanilla JS, local storage, events, and tests with Jest

class created on console is actually is a FUNCTION internally. 

ES5 = var
ES6 = let 

Types
string, number, boolean, object, undefined, function 


How to know the ESS version? 

JQuery: 
  $(domnode) -> returns a reference to a wrapper that contains several methods

  var le = document.getElem... 
  $le = $(le) 
  $le.hide()
  $le.show()


ID requires a hash "#"
$ is the only function you need, just pass the parameter (node, function, object, etc)


------
NODE 

npm init -y
Creates a package.json with default values (-y)

npm install jest 

Modify the package.json file with the following:
    "scripts": {
        "test": "jest"
    },

Run the test 
npm test
   No tests found, exiting with code 1

------


https://262.ecma-international.org/5.1/#sec-11.9.3
Abstract equality comparison algorithm
( == )

The comparison x == y, where x and y are values, produces true or false.

The Strict Equals Operator ( === )

The production EqualityExpression : EqualityExpression === RelationalExpression is evaluated as follows:

Let lref be the result of evaluating EqualityExpression.
Let lval be GetValue(lref).
Let rref be the result of evaluating RelationalExpression.
Let rval be GetValue(rref).
Return the result of performing the strict equality comparison rval === lval. 

==================

Function Invocation Patters

It doesn't matter where a function is 
nor does matter who owns the function

What matters is HOW the function is invoked


1. As a method of an object
  `this` refers to the object
  ```
    var emp = {
      name: 'Matheus'
    }

    function whoAmI() {
      console.log('I am ', this.name);
    }

    // Adds the function as a property of the object;
    // In JavaScript, a function is a property
    emp['whoAmI'] = whoAmI 


    var emp = {
      name: 'Matheus'
      whoAmI = REFERENCE TO THE FUNCTION whoAmI()
    }

    emp.whoAmI();
    $ I am Matheus
  ```

Note that this is just a reference. Almost like it appends the function to the object in its state.
For that reason, if the function whoAmI changes, it will NOT affect the result of all the other objects.
It will create a new function with the same name.

```
whoAmI();
> I am  
```

That is because it refers to the Global Scope, `window.name`
```
window.name
> ''
```

POC: 
```
window.name = 'JS Class'
> 'JS Class'
whoAmI();
> I am  JS Class
```


--- 

2. As a function
3. Using the 'call' method of the function
4. Using the 'apply' method of the function
5. As an 'Immediately Invoke Function Expression' (IIFE)
6. Using the 'new' keyword

============